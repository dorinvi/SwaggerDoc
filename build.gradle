buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.3'
        classpath 'com.moowork.gradle:gradle-node-plugin:1.1.0'
        classpath 'io.github.swagger2markup:swagger2markup-gradle-plugin:1.2.0'
        classpath "io.github.swagger2markup:swagger2markup:1.2.0"
        classpath "io.github.swagger2markup:swagger2markup-import-files-ext:1.2.0"
        classpath 'io.github.swagger2markup:swagger2markup-gradle-plugin:1.2.0'
        classpath "io.github.swagger2markup:swagger2markup:1.2.0"
        classpath "io.github.swagger2markup:swagger2markup-import-files-ext:1.2.0"
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    }
}

apply plugin: 'com.moowork.node'
apply plugin: 'io.github.swagger2markup'
apply plugin: 'org.asciidoctor.convert'

node {
  version = '6.4.0'
  npmVersion = '3.10.6'
  download = true
  // distBaseUrl = Custom artifactory location here for node/npm.
}

ext {
    gitRepoUri = project.hasProperty('repo') ? project.getProperty('repo') : 'https://github.com/monsterstack/discovery-service.git'
    gitRepoBranch = project.hasProperty('branch') ? project.getProperty('branch') : 'origin/development' // a commit hash, or tag name, or branch name (with remote prefix, like 'origin/master')
    gitRepoDir = "${buildDir}/repo"
    jsonFile = "${buildDir}/swagger.json"
    asciiDir = "${buildDir}/asciidoc"
}

task cleanAll (type: Delete) {
//  println gradle.repo
  delete buildDir, 'node_modules'
}

task cleanBuild (type: Delete) {
    delete buildDir
}

task checkoutRepo(type: com.palominolabs.gradle.task.git.clone.GitCloneTask, dependsOn: cleanBuild) {
    dir = file(gitRepoDir)
    uri = gitRepoUri
    treeish = gitRepoBranch
}

task generateJson(type: NodeTask, dependsOn: checkoutRepo) {
    dependsOn npmInstall
    script = file('src2html.js')
    args = [jsonFile, gitRepoDir]
}


convertSwagger2markup {
    dependsOn generateJson
    swaggerInput file( jsonFile ).getAbsolutePath()
    outputDir file( asciiDir )
    config = ['swagger2markup.markupLanguage': 'ASCIIDOC']
}

asciidoctor {
    dependsOn convertSwagger2markup
    sourceDir = file('.')
    sources {
        include 'index.adoc'
    }
    backends = ['html5']
    attributes = [
            doctype: 'book',
            toc: 'left',
            toclevels: '3',
            numbered: '',
            sectlinks: '',
            sectanchors: '',
            hardbreaks: '',
            generated: asciiDir
    ]
}

defaultTasks 'asciidoctor'
